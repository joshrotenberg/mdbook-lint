name: Release Binaries

on:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: mdbook-lint
            archive: mdbook-lint-linux-x86_64.tar.gz
          
          # Linux musl (static binary)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary: mdbook-lint
            archive: mdbook-lint-linux-x86_64-musl.tar.gz
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: mdbook-lint.exe
            archive: mdbook-lint-windows-x86_64.zip
          
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: mdbook-lint
            archive: mdbook-lint-macos-x86_64.tar.gz
          
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: mdbook-lint
            archive: mdbook-lint-macos-aarch64.tar.gz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.archive }} ${{ matrix.binary }}
          cd ../../..
          echo "ASSET=${{ matrix.archive }}" >> $GITHUB_ENV

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          cd target\${{ matrix.target }}\release
          7z a ..\..\..\${{ matrix.archive }} ${{ matrix.binary }}
          cd ..\..\..
          echo "ASSET=${{ matrix.archive }}" >> $env:GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream