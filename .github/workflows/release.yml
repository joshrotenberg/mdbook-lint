name: Release

on:
  # Trigger when a release PR is merged
  pull_request:
    types: [closed]
    branches:
      - main
  # Also allow manual trigger with tag
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.5.1)'
        required: true

permissions:
  contents: write

jobs:
  create-release:
    # Only run if it's a merged release PR, a tag push, or manual trigger
    if: |
      (github.event_name == 'pull_request' && 
       github.event.pull_request.merged == true && 
       contains(github.event.pull_request.labels.*.name, 'release')) ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="v${{ github.event.inputs.version }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # Extract version from PR title
            TITLE="${{ github.event.pull_request.title }}"
            VERSION=$(echo "$TITLE" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            if [ -z "$VERSION" ]; then
              echo "Could not extract version from PR title: $TITLE"
              exit 1
            fi
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create tag if from PR
        if: github.event_name == 'pull_request'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}
      
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: mdbook-lint
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: mdbook-lint
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: mdbook-lint
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: mdbook-lint.exe

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf mdbook-lint-${{ github.ref_name }}-${{ matrix.target }}.tar.gz ${{ matrix.binary_name }}
          mv mdbook-lint-${{ github.ref_name }}-${{ matrix.target }}.tar.gz ../../../
      
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          cd target\${{ matrix.target }}\release
          Compress-Archive -Path ${{ matrix.binary_name }} -DestinationPath ..\..\..\mdbook-lint-${{ github.ref_name }}-${{ matrix.target }}.zip
      
      - name: Upload to release (Unix)
        if: matrix.os != 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: mdbook-lint-${{ github.ref_name }}-${{ matrix.target }}.tar.gz
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload to release (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: mdbook-lint-${{ github.ref_name }}-${{ matrix.target }}.zip
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crates:
    needs: create-release
    runs-on: ubuntu-latest
    if: false  # Disabled until crates are ready to publish
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Publish mdbook-lint-core
        run: cargo publish --manifest-path crates/mdbook-lint-core/Cargo.toml
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      
      - name: Wait for crates.io
        run: sleep 30
      
      - name: Publish mdbook-lint-rulesets
        run: cargo publish --manifest-path crates/mdbook-lint-rulesets/Cargo.toml
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      
      - name: Wait for crates.io
        run: sleep 30
      
      - name: Publish mdbook-lint
        run: cargo publish --manifest-path crates/mdbook-lint-cli/Cargo.toml
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}