name: Simple Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  check-commits:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version_bump: ${{ steps.check.outputs.version_bump }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for release commits
        id: check
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --format=%s)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --format=%s)
          fi
          
          # Check for conventional commits
          if echo "$COMMITS" | grep -qE "^(feat|fix|perf)(\(.+\))?:"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            
            # Determine version bump
            if echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
              echo "version_bump=minor" >> $GITHUB_OUTPUT
            else
              echo "version_bump=patch" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  create-release-pr:
    needs: check-commits
    if: needs.check-commits.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Calculate next version
        id: version
        run: |
          CURRENT_VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
          BUMP_TYPE="${{ needs.check-commits.outputs.version_bump }}"
          
          # Parse version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Bump version
          if [ "$BUMP_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update versions
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          # Update workspace version
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          
          # Update all workspace dependencies
          find . -name "Cargo.toml" -exec sed -i "s/version = \"0.4.1\"/version = \"$NEW_VERSION\"/g" {} \;
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: release v${{ steps.version.outputs.new_version }}"
          title: "chore: release v${{ steps.version.outputs.new_version }}"
          body: |
            ## Release v${{ steps.version.outputs.new_version }}
            
            This PR was automatically generated to release version ${{ steps.version.outputs.new_version }}.
            
            ### Changes included:
            - Updated version in Cargo.toml files
            
            When merged, this will trigger a GitHub release with built binaries.
          branch: release/v${{ steps.version.outputs.new_version }}
          labels: release