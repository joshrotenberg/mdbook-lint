name: Comprehensive Corpus Testing

on:
  schedule:
    # Run comprehensive corpus testing nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering
  pull_request:
    # Only run on PRs that affect corpus or testing infrastructure
    paths:
      - 'tests/corpus/**'
      - 'tests/corpus_*.rs'
      - 'scripts/download-corpus.sh'
      - '.github/workflows/corpus-nightly.yml'

jobs:
  comprehensive-corpus:
    name: Comprehensive Corpus Testing
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache extended corpus
      uses: actions/cache@v3
      with:
        path: tests/corpus/extended
        key: corpus-extended-${{ github.run_id }}
        restore-keys: |
          corpus-extended-
          
    - name: Install markdownlint for compatibility testing
      run: npm install -g markdownlint-cli
      
    - name: Download extended corpus
      run: ./scripts/download-corpus.sh
      
    - name: Build test binary
      run: cargo build --all-features
      
    - name: Run comprehensive corpus tests
      run: |
        cargo test --test corpus_integration_test test_extended_corpus --ignored -- --nocapture
        
    - name: Run comprehensive compatibility tests  
      run: |
        cargo test --test corpus_integration_test test_comprehensive_corpus --ignored -- --nocapture
        
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: corpus-test-reports
        path: |
          extended_corpus_test_report.json
          corpus_test_report.json
          
    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üìä Comprehensive Corpus Test Results\n\n';
          
          try {
            const extendedReport = JSON.parse(fs.readFileSync('extended_corpus_test_report.json', 'utf8'));
            comment += `### Extended Corpus\n`;
            comment += `- **Files tested**: ${extendedReport.total_files}\n`;
            comment += `- **Success rate**: ${extendedReport.success_percentage?.toFixed(1) || 'N/A'}%\n`;
            comment += `- **Compatibility**: ${extendedReport.compatibility_percentage?.toFixed(1) || 'N/A'}%\n\n`;
          } catch (e) {
            comment += '### Extended Corpus\n‚ùå Test failed or report not generated\n\n';
          }
          
          try {
            const comprehensiveReport = JSON.parse(fs.readFileSync('corpus_test_report.json', 'utf8'));
            comment += `### Comprehensive Testing\n`;
            comment += `- **Files tested**: ${comprehensiveReport.total_files}\n`;
            comment += `- **Success rate**: ${comprehensiveReport.success_percentage?.toFixed(1) || 'N/A'}%\n`;
            comment += `- **Compatibility**: ${comprehensiveReport.compatibility_percentage?.toFixed(1) || 'N/A'}%\n`;
            
            if (comprehensiveReport.performance) {
              comment += `- **Speed improvement**: ${comprehensiveReport.performance.speed_improvement?.toFixed(1) || 'N/A'}x\n`;
            }
          } catch (e) {
            comment += '### Comprehensive Testing\n‚ùå Test failed or report not generated\n';
          }
          
          comment += '\n---\n*This comprehensive testing runs on a schedule and for corpus-related changes.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  performance-benchmark:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    needs: comprehensive-corpus
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install markdownlint
      run: npm install -g markdownlint-cli
      
    - name: Restore extended corpus cache
      uses: actions/cache@v3
      with:
        path: tests/corpus/extended
        key: corpus-extended-${{ github.run_id }}
        
    - name: Build release binary
      run: cargo build --release --all-features
      
    - name: Run performance benchmarks
      run: |
        cargo test --test corpus_integration_test test_performance_benchmark --ignored --release -- --nocapture
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmarks
        path: |
          benchmark_results.json