searchState.loadedDescShard("mdbook_lint", 0, "A markdown linter for mdBook projects.\nDescription\nHuman-readable name\nCurrent version of mdbook-lint\nCreate a lint engine with all available rules (standard + …\nCreate a lint engine with only mdBook-specific rules\nCreate a lint engine with only standard markdown rules\nRule deduplication logic to eliminate duplicate violations\nRule provider system and lint engine.\nError types for mdbook-lint\nCommon imports\nConsolidated rules module for mdbook-lint\nStandard markdown rules (MD001-MD059).\nViolation types for mdbook-lint\nCode block related rules\nConfiguration for mdbook-lint\nHow to handle deprecated rule warnings\nQuit on malformed markdown with error\nShow info messages for deprecated rules\nLink and reference rules\nHow to handle malformed markdown\nmdBook-specific rules\nRule categories for bulk configuration\nDon’t show any messages for deprecated rules\nSilently skip malformed files\nDocument structure rules (headings, organization)\nStyle and formatting rules\nWarn but continue processing\nShow warning messages for deprecated rules (default)\nWhitespace and line ending rules\nHow to handle deprecated rule warnings\nList of disabled rule categories\nList of explicitly disabled rules\nList of enabled rule categories\nList of explicitly enabled rules\nWhether to fail builds on errors\nWhether to fail builds on warnings\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad configuration from a file, auto-detecting format by …\nParse configuration from a JSON string\nConvert markdownlint configuration format to our internal …\nCreate configuration from markdownlint.json format\nLoad configuration from mdBook preprocessor config\nAuto-detect format and parse configuration from string\nParse configuration from a TOML string\nParse configuration from a YAML string\nGet rule-specific configuration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow to handle malformed markdown\nEnable markdownlint compatibility mode (disables rules …\nMerge this config with another, with the other taking …\nRule-specific configuration\nCheck if a rule should be enabled based on configuration\nSerialize configuration to JSON string\nSerialize configuration to TOML string\nSerialize configuration to YAML string\nConfiguration for violation deduplication\nRule overlap definitions - maps which rules check for the …\nDeduplicates violations based on configuration and rule …\nWhether deduplication is enabled (default: true)\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet overlapping rules for a given rule ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a violation signature represents a known overlap\nRule precedence mapping (higher precedence rules win)\nRepresents a parsed markdown document with position …\nGet all code block nodes from the AST\nGet all code block nodes with error context\nGet the column number (1-based) for a given byte offset\nThe original markdown content\nReturns the argument unchanged.\nGet the heading level for a heading node\nGet all heading nodes from the AST\nGet all heading nodes with error context\nCalls <code>U::from(self)</code>.\nGet the line number (1-based) for a given byte offset\nLines split for line-based rule processing\nParse a markdown document from content and path\nGet the source position of a node\nGet the text content of a node\nParse the content into a comrak AST\nParse AST with error context\nPath to the source file\nMarkdown linting engine\nRegistry for managing rule providers and creating engines\nInformation about a registered provider (for …\nTrait for rule providers to register rules with the engine\nList all available rule IDs from all providers\nGet all available rule IDs\nProvider-specific configuration schema\nCreate a lint engine with all registered providers\nCreate a rule registry with all registered providers\nHuman-readable description of this rule provider\nGet enabled rules based on configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a provider by ID\nProvider initialization hook\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLint content string directly (convenience method)\nLint a document with all registered rules\nLint a document with specific configuration\nCreate a new lint engine with no rules\nCreate a new empty plugin registry\nUnique identifier for this rule provider\nGet provider information for debugging/introspection\nGet all registered providers\nRegister a rule provider\nRegister all rules from this provider with the registry\nGet the underlying rule registry\nGet a mutable reference to the rule registry\nList of rule IDs that this provider registers\nVersion of this rule provider\nCreate a lint engine with an existing rule registry\nConfiguration-related errors\nConfiguration-related errors\nSpecialized error type for configuration operations\nRule dependency not met\nDocument processing errors\nDocument processing errors\nSpecialized error type for document-related operations\nContains the error value\nError context extension trait for adding contextual …\nRule execution failed\nPlugin initialization failed\nExtension trait for converting specialized errors to …\nInvalid rule configuration\nInvalid encoding detected\nDocument format is invalid or unsupported\nInvalid configuration format\nIO-related errors (file reading, writing, etc.)\nIO-related errors (file reading, writing, etc.)\nJSON serialization/deserialization errors\nJSON serialization/deserialization errors\nPlugin loading failed\nMain error type for mdbook-lint operations\nCompatibility alias for the old error name\nRule not found in registry\nConfiguration file not found\nPlugin not found\nContains the success value\nParsing errors with position information\nParsing errors with position information\nDocument parsing failed\nPlugin system errors\nPlugin system errors\nSpecialized error type for plugin operations\nFailed to read document from file\nRule registration conflict\nRegistry operation errors\nRegistry operation errors\nResult type alias for mdbook-lint operations\nRule execution errors\nRule execution errors\nSpecialized error type for rule-related operations\nTOML serialization/deserialization errors\nTOML serialization/deserialization errors\nDocument exceeds size limits\nUnsupported configuration version\nConfiguration validation failed\nPlugin version incompatibility\nDirectory traversal errors\nDirectory traversal errors\nYAML serialization/deserialization errors\nYAML serialization/deserialization errors\nCreate a configuration error\nCreate a dependency not met error\nCreate a document error\nCreate an execution failed error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a Result&lt;T, MdBookLintError&gt;\nCreate an invalid config error\nCreate an invalid encoding error\nCreate a “not found” error\nCreate a parse error with position information\nCreate a parse failed error\nCreate a plugin error\nCreate a read failed error\nCreate a registration conflict error\nCreate a registry error\nCreate a rule error with context\nCreate a too large error\nAdd configuration context to an error\nAdd document context to an error\nAdd plugin context to an error\nAdd rule context to an error\nmdbook-lint preprocessor\nConfiguration options\nLinting engine with combined rules\nReturns the argument unchanged.\nHandle the preprocessor protocol (stdin/stdout …\nCalls <code>U::from(self)</code>.\nLoad configuration from preprocessor context\nCreate a new preprocessor with default rules and config\nCreate a new preprocessor with custom config\nRegistry for managing linting rules\nCheck a document with all rules\nCheck a document with all rules using a single AST parse\nCheck a document with enabled rules using a single AST …\nCheck a document with enabled rules\nCreate a new empty registry\nReturns the argument unchanged.\nGet rules that should be enabled based on configuration\nGet a rule by ID\nCalls <code>U::from(self)</code>.\nCheck if the registry is empty\nGet the number of registered rules\nCreate a new empty registry\nRegister a rule with the registry\nGet all rule IDs\nGet all registered rules\nCheck if a rule should run based on configuration and …\nAccessibility and usability rules\nHelper trait for AST-based rules\nLinks, images, and content validation\nRule is deprecated and may be removed in future versions\nRule is experimental and may change\nWhitespace, line length, and formatting consistency\nLink-specific validation\nmdBook-specific functionality and conventions\nRule number reserved but never implemented\nTrait that all linting rules must implement\nRule categories for grouping and filtering\nMetadata about a rule’s status, category, and properties\nRule stability levels\nRule is stable and recommended for production use\nDocument structure and heading organization\nWhether this rule can automatically fix violations\nWhether this rule can automatically fix violations\nRule category for grouping\nCheck a document for violations of this rule (backward …\nCheck a document using its AST\nCheck a document for violations of this rule with optional …\nCreate a violation for this rule\nCreate a violation for this rule\nCreate metadata for a deprecated rule\nWhether the rule is deprecated\nReason for deprecation (if applicable)\nDescription of what the rule checks\nDescription of what the rule checks\nCreate metadata for an experimental rule\nAttempt to fix a violation (if supported)\nAttempt to fix a violation (if supported)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for the rule (e.g., “MD001”)\nUnique identifier for the rule (e.g., “MD001”)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the version when this rule was introduced\nVersion when rule was introduced\nMetadata about this rule’s status and properties\nMetadata about this rule’s status and properties\nHuman-readable name for the rule (e.g., “…\nHuman-readable name for the rule (e.g., “…\nSuggested replacement rule (if applicable)\nCreate metadata for a reserved rule number (never …\nStability level of the rule\nCreate metadata for a stable, active rule\nProvider for mdBook-specific linting rules\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMDBOOK002: Internal link validation\nMDBOOK003: SUMMARY.md structure validation\nMDBOOK004: No duplicate chapter titles across the book\nStandard markdownlint-compatible rules (MD001-MD059)\nMDBOOK001: Code blocks should have language tags\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check that internal links resolve to existing files\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMDBOOK003: Validates SUMMARY.md structure and formatting\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMDBOOK004: No duplicate chapter titles across the book\nCheck for duplicate titles across multiple documents\nCreate violations for cross-document duplicates\nExtract all heading titles from a document for cross-file …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMD002: First heading should be a top-level heading\nMD003: Heading style consistency\nMD004: Unordered list style consistency\nMD005: List item indentation consistency\nMD008: Reserved rule number\nMD009: No trailing spaces\nMD010: Hard tabs\nMD011: Reversed link syntax\nMD012: Multiple consecutive blank lines\nMD014: Dollar signs used before commands without showing …\nMD015: Removed rule\nMD016: Gap in rule numbering\nMD017: Removed rule\nMD018: No space after hash on atx style heading\nMD019: Multiple spaces after hash on ATX heading\nMD020: No space inside hashes on closed ATX heading\nMD021: Multiple spaces inside hashes on closed ATX heading\nMD022: Headings should be surrounded by blank lines\nMD023: Headings must start at the beginning of the line\nMD024: Multiple headings with the same content\nMD025: Single H1 per document\nMD026: Trailing punctuation in headings\nMD027: Multiple spaces after blockquote symbol\nMD028: Blank line inside blockquote\nMD029: Ordered list item prefix consistency\nMD030: Spaces after list markers\nMD031: Fenced code blocks should be surrounded by blank …\nMD032: Lists should be surrounded by blank lines\nMD033: Inline HTML should be avoided\nMD034: Bare URL without angle brackets\nMD039: Spaces inside link text\nMD040: Fenced code blocks should have a language specified\nMD041: First line in file should be a top level heading\nMD042: No empty links\nMD043: Required heading structure\nMD044: Proper names should have correct capitalization\nMD045: Images should have alternate text\nMD046: Code block style consistency\nMD047: Files should end with a single newline character\nMD048: Code fence style consistency\nMD049: Emphasis style consistency\nMD050: Strong style consistency\nMD051 - Link fragments should be valid\nMD052 - Reference links and images should use a label that …\nMD053 - Link and image reference definitions should be …\nMD054 - Link and image style\nMD055: Table pipe style\nMD056 - Table column count\nMD057: Reserved for future use\nMD058: Tables should be surrounded by blank lines\nMD059 - Link text should be descriptive\nMD001: Heading levels should only increment by one level …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check that the first heading is a top-level heading\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD002 rule with default settings (level 1)\nCreate a new MD002 rule with custom level\nMD003: Heading style should be consistent throughout the …\nConfiguration for MD003 heading style consistency\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe heading style to enforce\nList marker styles for unordered lists\nConfiguration for list style checking\nRule to check unordered list style consistency\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new MD004 rule with consistent style (default)\nCreate a new MD004 rule with a specific style\nRule to check for consistent list item indentation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMD006 - Consider starting bulleted lists at the beginning …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMD007 - Unordered list indentation\nReturns the argument unchanged.\nNumber of spaces for indent (default: 2)\nCalls <code>U::from(self)</code>.\nSpaces for first level indent when start_indented is set …\nWhether to indent the first level of the list (default: …\nPlaceholder for reserved rule MD008\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for trailing spaces at the end of lines\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD009 rule with default settings\nCreate a new MD009 rule with custom settings\nRule to check for hard tab characters\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD010 rule with default settings\nCreate a new MD010 rule with custom tab size\nRule to check for reversed link syntax\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for multiple consecutive blank lines\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD012 rule with default settings (max 1 blank …\nCreate a new MD012 rule with custom maximum consecutive …\nMD013: Line length should not exceed a specified limit\nReturns the argument unchanged.\nWhether to ignore code blocks\nWhether to ignore headings\nWhether to ignore tables\nCalls <code>U::from(self)</code>.\nMaximum allowed line length\nCreate a new MD013 rule with default settings\nCreate a new MD013 rule with custom line length\nRule to check that shell commands don’t include dollar …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPlaceholder for removed rule MD015\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPlaceholder for non-existent rule MD016\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPlaceholder for removed rule MD017\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for missing space after hash on ATX style …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for multiple spaces after hash on ATX style …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for spaces inside hashes on closed ATX style …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for multiple spaces inside hashes on closed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMD022: Headings should be surrounded by blank lines\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check that headings start at the beginning of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for duplicate headings\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD024 rule with default settings\nCreate a new MD024 rule with custom settings\nRule to check that documents have only one H1 heading\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD025 rule with default settings (level 1)\nCreate a new MD025 rule with custom level\nRule to check that headings do not end with punctuation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD026 rule with default settings\nCreate a new MD026 rule with custom punctuation characters\nRule to check for multiple spaces after blockquote symbol\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for blank lines inside blockquotes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll ones: 1, 1, 1, 1…\nUse whatever style is found first in the document\nRule to check for ordered list item prefix consistency\nConfiguration for ordered list prefix style\nSequential numbering: 1, 2, 3, 4…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new MD029 rule with default settings (consistent …\nCreate a new MD029 rule with a specific style\nRule to check for spaces after list markers\nConfiguration for spaces after list markers\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new MD030 rule with default settings\nNumber of spaces after ordered list markers in multi-item …\nNumber of spaces after ordered list markers (default: 1)\nNumber of spaces after unordered list markers in …\nNumber of spaces after unordered list markers (default: 1)\nCreate a new MD030 rule with custom configuration\nMD031: Fenced code blocks should be surrounded by blank …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMD032: Lists should be surrounded by blank lines\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to detect inline HTML elements\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for bare URLs without angle brackets\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMD035 - Horizontal rule style\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHorizontal rule style: “consistent”, “—”, “***…\nMD036 - Emphasis used instead of a heading\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPunctuation characters that prevent treating emphasis as …\nMD037 - Spaces inside emphasis markers\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMD038 - Spaces inside code span elements\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for spaces inside link text\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check that fenced code blocks have a language …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check that the first line is a top-level heading\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check for empty links\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check required heading structure\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD043 rule with default heading structure\nCreate a new MD043 rule with required heading structure\nRule to check proper name capitalization\nAdd a proper name to the list\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD044 rule with default proper names\nCreate a new MD044 rule with custom proper names\nRule to check that images have alternate text\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDetect from first usage in document\nUse fenced code blocks (``` or ~~~)\nUse indented code blocks (4 spaces or 1 tab)\nRule to check code block style consistency\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new MD046 rule with consistent style detection\nCreate a new MD046 rule with specific style preference\nRule to check that files end with a single newline\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUse backticks (```)\nDetect from first usage in document\nRule to check code fence style consistency\nUse tildes (~~~)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new MD048 rule with consistent style detection\nCreate a new MD048 rule with specific style preference\nUse asterisk (<em>text</em>)\nDetect from first usage in document\nRule to check emphasis style consistency\nUse underscore (<em>text</em>)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new MD049 rule with consistent style detection\nCreate a new MD049 rule with specific style preference\nUse double asterisk (<strong>text</strong>)\nDetect from first usage in document\nRule to check strong emphasis style consistency\nUse double underscore (<strong>text</strong>)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new MD050 rule with consistent style detection\nCreate a new MD050 rule with specific style preference\nMD051 - Link fragments should be valid\nReturns the argument unchanged.\nSet whether to ignore case when comparing fragments\nCalls <code>U::from(self)</code>.\nCreate a new MD051 rule instance\nMD052 - Reference links and images should use a label that …\nReturns the argument unchanged.\nSet the list of ignored labels\nCalls <code>U::from(self)</code>.\nCreate a new MD052 rule instance\nSet whether to include shortcut syntax\nMD053 - Link and image reference definitions should be …\nReturns the argument unchanged.\nSet the list of ignored definitions\nCalls <code>U::from(self)</code>.\nCreate a new MD053 rule instance\nMD054 - Link and image style\nSet whether to allow autolinks\nReturns the argument unchanged.\nAllow inline links\nCalls <code>U::from(self)</code>.\nCreate a new MD054 rule instance\nAllow reference links\nAllow URL inline links\nDetect from first usage in document\nLeading and trailing pipes\nRule to check table pipe style consistency\nNo leading or trailing pipes\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new MD055 rule with consistent style detection\nCreate a new MD055 rule with specific style preference\nMD056 - Table column count\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD056 rule instance\nPlaceholder for reserved rule MD057\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRule to check that tables are surrounded by blank lines\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMD059 - Link text should be descriptive\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MD059 rule instance\nSet the list of prohibited link texts\nProvider for standard markdown rules (MD001-MD059)\nCreate a lint engine with standard rules only\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError that must be fixed\nInformational message\nSeverity levels for violations\nA violation found during linting\nWarning that should be addressed\nColumn number (1-based)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number (1-based)\nDescription of the violation\nRule identifier (e.g., “MD001”)\nHuman-readable rule name (e.g., “heading-increment”)\nSeverity level")